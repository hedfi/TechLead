{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n/**\n * Directive to prevent multiple rapid clicks on buttons\n * Usage: <button [appDebounceClick]=\"500\" (debounceClick)=\"onClick()\">Click me</button>\n */\nexport let DebounceClickDirective = /*#__PURE__*/(() => {\n  class DebounceClickDirective {\n    constructor() {\n      this.debounceTime = 500; // Default debounce time in ms\n      this.debounceClick = new EventEmitter();\n      this.clicks = new Subject();\n      this.subscription = new Subscription();\n    }\n    ngOnInit() {\n      this.subscription = this.clicks.pipe(debounceTime(this.debounceTime)).subscribe(event => this.debounceClick.emit(event));\n    }\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n    clickEvent(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.clicks.next(event);\n    }\n    static {\n      this.ɵfac = function DebounceClickDirective_Factory(t) {\n        return new (t || DebounceClickDirective)();\n      };\n    }\n    static {\n      this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n        type: DebounceClickDirective,\n        selectors: [[\"\", \"appDebounceClick\", \"\"]],\n        hostBindings: function DebounceClickDirective_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function DebounceClickDirective_click_HostBindingHandler($event) {\n              return ctx.clickEvent($event);\n            });\n          }\n        },\n        inputs: {\n          debounceTime: \"debounceTime\"\n        },\n        outputs: {\n          debounceClick: \"debounceClick\"\n        }\n      });\n    }\n  }\n  return DebounceClickDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}