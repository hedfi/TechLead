{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { NotificationType } from '../../../core/services/notification.service';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/notification.service\";\nimport * as i2 from \"@angular/common\";\nfunction NotificationToastComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"span\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 5)(5, \"p\", 6);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 7);\n    i0.ɵɵlistener(\"click\", function NotificationToastComponent_div_1_Template_div_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const notification_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeNotification(notification_r1));\n    });\n    i0.ɵɵelementStart(8, \"span\", 4);\n    i0.ɵɵtext(9, \"close\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const notification_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getNotificationClass(notification_r1.type))(\"@toastAnimation\", \"visible\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.getNotificationIcon(notification_r1.type));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(notification_r1.message);\n  }\n}\nexport let NotificationToastComponent = /*#__PURE__*/(() => {\n  class NotificationToastComponent {\n    constructor(notificationService) {\n      this.notificationService = notificationService;\n      this.notifications = [];\n      this.subscription = new Subscription();\n    }\n    ngOnInit() {\n      // Subscribe to notification service\n      this.subscription.add(this.notificationService.notifications.subscribe(notification => {\n        this.showNotification(notification);\n      }));\n    }\n    ngOnDestroy() {\n      // Unsubscribe to prevent memory leaks\n      this.subscription.unsubscribe();\n    }\n    /**\n     * Show a notification\n     */\n    showNotification(notification) {\n      // Add notification to array\n      this.notifications.push(notification);\n      // Remove notification after duration\n      setTimeout(() => {\n        this.removeNotification(notification);\n      }, notification.duration || 5000);\n    }\n    /**\n     * Remove a notification\n     */\n    removeNotification(notification) {\n      const index = this.notifications.indexOf(notification);\n      if (index > -1) {\n        this.notifications.splice(index, 1);\n      }\n    }\n    /**\n     * Get CSS class for notification type\n     */\n    getNotificationClass(type) {\n      switch (type) {\n        case NotificationType.SUCCESS:\n          return 'toast-success';\n        case NotificationType.ERROR:\n          return 'toast-error';\n        case NotificationType.INFO:\n          return 'toast-info';\n        case NotificationType.WARNING:\n          return 'toast-warning';\n        default:\n          return 'toast-info';\n      }\n    }\n    /**\n     * Get icon for notification type\n     */\n    getNotificationIcon(type) {\n      switch (type) {\n        case NotificationType.SUCCESS:\n          return 'check_circle';\n        case NotificationType.ERROR:\n          return 'error';\n        case NotificationType.INFO:\n          return 'info';\n        case NotificationType.WARNING:\n          return 'warning';\n        default:\n          return 'info';\n      }\n    }\n    static {\n      this.ɵfac = function NotificationToastComponent_Factory(t) {\n        return new (t || NotificationToastComponent)(i0.ɵɵdirectiveInject(i1.NotificationService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: NotificationToastComponent,\n        selectors: [[\"app-notification-toast\"]],\n        decls: 2,\n        vars: 1,\n        consts: [[1, \"toast-container\"], [\"class\", \"toast\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"toast\", 3, \"ngClass\"], [1, \"toast-icon\"], [1, \"material-icons\"], [1, \"toast-content\"], [1, \"toast-message\"], [1, \"toast-close\", 3, \"click\"]],\n        template: function NotificationToastComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, NotificationToastComponent_div_1_Template, 10, 4, \"div\", 1);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.notifications);\n          }\n        },\n        dependencies: [i2.NgClass, i2.NgForOf],\n        styles: [\".toast-container[_ngcontent-%COMP%]{position:fixed;top:20px;right:20px;z-index:1050;max-width:350px;width:100%;display:flex;flex-direction:column;gap:10px}.toast[_ngcontent-%COMP%]{display:flex;align-items:center;padding:12px 16px;border-radius:4px;box-shadow:0 4px 12px #00000026;color:#fff;font-size:14px;line-height:1.5;min-height:48px;width:100%;position:relative;overflow:hidden}.toast-success[_ngcontent-%COMP%]{background-color:#4caf50}.toast-error[_ngcontent-%COMP%]{background-color:#f44336}.toast-info[_ngcontent-%COMP%]{background-color:#2196f3}.toast-warning[_ngcontent-%COMP%]{background-color:#ff9800}.toast-icon[_ngcontent-%COMP%]{margin-right:12px;display:flex;align-items:center;justify-content:center}.toast-icon[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{font-size:20px}.toast-content[_ngcontent-%COMP%]{flex:1}.toast-content[_ngcontent-%COMP%]   .toast-message[_ngcontent-%COMP%]{margin:0;padding:0;word-break:break-word}.toast-close[_ngcontent-%COMP%]{margin-left:12px;cursor:pointer;opacity:.7;transition:opacity .2s ease;display:flex;align-items:center;justify-content:center}.toast-close[_ngcontent-%COMP%]:hover{opacity:1}.toast-close[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%]{font-size:18px}@media (max-width: 576px){.toast-container[_ngcontent-%COMP%]{right:10px;left:10px;max-width:calc(100% - 20px)}}\"],\n        data: {\n          animation: [trigger('toastAnimation', [state('void', style({\n            transform: 'translateY(-100%)',\n            opacity: 0\n          })), state('visible', style({\n            transform: 'translateY(0)',\n            opacity: 1\n          })), transition('void => visible', animate('300ms ease-out')), transition('visible => void', animate('300ms ease-in'))])]\n        }\n      });\n    }\n  }\n  return NotificationToastComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}