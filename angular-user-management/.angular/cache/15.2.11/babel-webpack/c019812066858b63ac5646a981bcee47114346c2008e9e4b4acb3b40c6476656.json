{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var NotificationType;\n(function (NotificationType) {\n  NotificationType[\"SUCCESS\"] = \"success\";\n  NotificationType[\"ERROR\"] = \"error\";\n  NotificationType[\"INFO\"] = \"info\";\n  NotificationType[\"WARNING\"] = \"warning\";\n})(NotificationType || (NotificationType = {}));\nexport class NotificationService {\n  constructor() {\n    this.notificationSubject = new Subject();\n    this.defaultDuration = 5000; // 5 seconds\n  }\n  /**\n   * Get notifications as an observable\n   */\n  get notifications() {\n    return this.notificationSubject.asObservable();\n  }\n  /**\n   * Show a success notification\n   */\n  showSuccess(message, duration = 3000) {\n    this.showNotification({\n      message,\n      type: NotificationType.SUCCESS,\n      duration\n    });\n  }\n  /**\n   * Show an error notification\n   */\n  showError(message, duration = 5000) {\n    this.showNotification({\n      message,\n      type: NotificationType.ERROR,\n      duration\n    });\n  }\n  /**\n   * Show an info notification\n   */\n  showInfo(message, duration = 3000) {\n    this.showNotification({\n      message,\n      type: NotificationType.INFO,\n      duration\n    });\n  }\n  /**\n   * Show a warning notification\n   */\n  showWarning(message, duration = 4000) {\n    this.showNotification({\n      message,\n      type: NotificationType.WARNING,\n      duration\n    });\n  }\n  /**\n   * Display notification\n   */\n  showNotification(notification) {\n    this.notificationSubject.next(notification);\n    // Log to console for debugging\n    console.log(`${notification.type.toUpperCase()}: ${notification.message}`);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAoB,MAAM;;AAE1C,WAAYC,gBAKX;AALD,WAAYA,gBAAgB;EAC1BA,uCAAmB;EACnBA,mCAAe;EACfA,iCAAa;EACbA,uCAAmB;AACrB,CAAC,EALWA,gBAAgB,KAAhBA,gBAAgB;AAgB5B,OAAM,MAAOC,mBAAmB;EAHhCC;IAIU,wBAAmB,GAAG,IAAIH,OAAO,EAAgB;IACjD,oBAAe,GAAG,IAAI,CAAC,CAAC;;EAEhC;;;EAGA,IAAII,aAAa;IACf,OAAO,IAAI,CAACC,mBAAmB,CAACC,YAAY,EAAE;EAChD;EAEA;;;EAGAC,WAAW,CAACC,OAAe,EAAEC,WAAmB,IAAI;IAClD,IAAI,CAACC,gBAAgB,CAAC;MACpBF,OAAO;MACPG,IAAI,EAAEV,gBAAgB,CAACW,OAAO;MAC9BH;KACD,CAAC;EACJ;EAEA;;;EAGAI,SAAS,CAACL,OAAe,EAAEC,WAAmB,IAAI;IAChD,IAAI,CAACC,gBAAgB,CAAC;MACpBF,OAAO;MACPG,IAAI,EAAEV,gBAAgB,CAACa,KAAK;MAC5BL;KACD,CAAC;EACJ;EAEA;;;EAGAM,QAAQ,CAACP,OAAe,EAAEC,WAAmB,IAAI;IAC/C,IAAI,CAACC,gBAAgB,CAAC;MACpBF,OAAO;MACPG,IAAI,EAAEV,gBAAgB,CAACe,IAAI;MAC3BP;KACD,CAAC;EACJ;EAEA;;;EAGAQ,WAAW,CAACT,OAAe,EAAEC,WAAmB,IAAI;IAClD,IAAI,CAACC,gBAAgB,CAAC;MACpBF,OAAO;MACPG,IAAI,EAAEV,gBAAgB,CAACiB,OAAO;MAC9BT;KACD,CAAC;EACJ;EAEA;;;EAGQC,gBAAgB,CAACS,YAA0B;IACjD,IAAI,CAACd,mBAAmB,CAACe,IAAI,CAACD,YAAY,CAAC;IAE3C;IACAE,OAAO,CAACC,GAAG,CAAC,GAAGH,YAAY,CAACR,IAAI,CAACY,WAAW,EAAE,KAAKJ,YAAY,CAACX,OAAO,EAAE,CAAC;EAC5E;;;uBA/DWN,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAsB,SAAnBtB,mBAAmB;MAAAuB,YAFlB;IAAM;EAAA","names":["Subject","NotificationType","NotificationService","constructor","notifications","notificationSubject","asObservable","showSuccess","message","duration","showNotification","type","SUCCESS","showError","ERROR","showInfo","INFO","showWarning","WARNING","notification","next","console","log","toUpperCase","factory","providedIn"],"sourceRoot":"","sources":["/Users/haythemhedfi/Desktop/TechLead/angular-user-management/src/app/core/services/notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\nexport enum NotificationType {\n  SUCCESS = 'success',\n  ERROR = 'error',\n  INFO = 'info',\n  WARNING = 'warning'\n}\n\nexport interface Notification {\n  message: string;\n  type: NotificationType;\n  duration?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private notificationSubject = new Subject<Notification>();\n  private defaultDuration = 5000; // 5 seconds\n  \n  /**\n   * Get notifications as an observable\n   */\n  get notifications(): Observable<Notification> {\n    return this.notificationSubject.asObservable();\n  }\n  \n  /**\n   * Show a success notification\n   */\n  showSuccess(message: string, duration: number = 3000): void {\n    this.showNotification({\n      message,\n      type: NotificationType.SUCCESS,\n      duration\n    });\n  }\n  \n  /**\n   * Show an error notification\n   */\n  showError(message: string, duration: number = 5000): void {\n    this.showNotification({\n      message,\n      type: NotificationType.ERROR,\n      duration\n    });\n  }\n  \n  /**\n   * Show an info notification\n   */\n  showInfo(message: string, duration: number = 3000): void {\n    this.showNotification({\n      message,\n      type: NotificationType.INFO,\n      duration\n    });\n  }\n  \n  /**\n   * Show a warning notification\n   */\n  showWarning(message: string, duration: number = 4000): void {\n    this.showNotification({\n      message,\n      type: NotificationType.WARNING,\n      duration\n    });\n  }\n  \n  /**\n   * Display notification\n   */\n  private showNotification(notification: Notification): void {\n    this.notificationSubject.next(notification);\n    \n    // Log to console for debugging\n    console.log(`${notification.type.toUpperCase()}: ${notification.message}`);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}