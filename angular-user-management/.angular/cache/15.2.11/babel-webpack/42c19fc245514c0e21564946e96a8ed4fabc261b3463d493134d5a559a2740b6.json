{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var NotificationType = /*#__PURE__*/(() => {\n  (function (NotificationType) {\n    NotificationType[\"SUCCESS\"] = \"success\";\n    NotificationType[\"ERROR\"] = \"error\";\n    NotificationType[\"INFO\"] = \"info\";\n    NotificationType[\"WARNING\"] = \"warning\";\n  })(NotificationType || (NotificationType = {}));\n  return NotificationType;\n})();\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    constructor() {\n      this.notificationSubject = new Subject();\n      this.defaultDuration = 5000; // 5 seconds\n    }\n    /**\n     * Get notifications as an observable\n     */\n    get notifications() {\n      return this.notificationSubject.asObservable();\n    }\n    /**\n     * Show a success notification\n     */\n    showSuccess(message, duration = 3000) {\n      this.showNotification({\n        message,\n        type: NotificationType.SUCCESS,\n        duration\n      });\n    }\n    /**\n     * Show an error notification\n     */\n    showError(message, duration = 5000) {\n      this.showNotification({\n        message,\n        type: NotificationType.ERROR,\n        duration\n      });\n    }\n    /**\n     * Show an info notification\n     */\n    showInfo(message, duration = 3000) {\n      this.showNotification({\n        message,\n        type: NotificationType.INFO,\n        duration\n      });\n    }\n    /**\n     * Show a warning notification\n     */\n    showWarning(message, duration = 4000) {\n      this.showNotification({\n        message,\n        type: NotificationType.WARNING,\n        duration\n      });\n    }\n    /**\n     * Display notification\n     */\n    showNotification(notification) {\n      this.notificationSubject.next(notification);\n      // Log to console for debugging\n      console.log(`${notification.type.toUpperCase()}: ${notification.message}`);\n    }\n    static {\n      this.ɵfac = function NotificationService_Factory(t) {\n        return new (t || NotificationService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: NotificationService,\n        factory: NotificationService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}