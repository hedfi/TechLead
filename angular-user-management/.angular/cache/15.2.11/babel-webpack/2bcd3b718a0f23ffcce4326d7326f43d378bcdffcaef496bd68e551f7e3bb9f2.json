{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/notification.service\";\nexport class ErrorInterceptor {\n  constructor(notificationService) {\n    this.notificationService = notificationService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        switch (error.status) {\n          case 400:\n            errorMessage = 'Bad Request: The server could not understand the request';\n            break;\n          case 401:\n            errorMessage = 'Unauthorized: You need to be authenticated';\n            break;\n          case 403:\n            errorMessage = 'Forbidden: You don\\'t have permission to access this resource';\n            break;\n          case 404:\n            errorMessage = 'Not Found: The requested resource does not exist';\n            break;\n          case 500:\n            errorMessage = 'Internal Server Error: Something went wrong on the server';\n            break;\n          default:\n            errorMessage = `Error ${error.status}: ${error.statusText || 'Unknown'}`;\n        }\n      }\n      // Log the error\n      console.error('HTTP Error:', error);\n      // Show notification for non-401 errors (401 is handled by auth interceptor)\n      if (error.status !== 401) {\n        this.notificationService.showError(errorMessage);\n      }\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,mBAAwC;IAAxC,wBAAmB,GAAnBA,mBAAmB;EAAwB;EAE/DC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BR,UAAU,CAAES,KAAwB,IAAI;MACtC,IAAIC,YAAY,GAAG,2BAA2B;MAE9C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;QACrC;QACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;OAC/C,MAAM;QACL;QACA,QAAQH,KAAK,CAACI,MAAM;UAClB,KAAK,GAAG;YACNH,YAAY,GAAG,0DAA0D;YACzE;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,4CAA4C;YAC3D;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,+DAA+D;YAC9E;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,kDAAkD;YACjE;UACF,KAAK,GAAG;YACNA,YAAY,GAAG,2DAA2D;YAC1E;UACF;YACEA,YAAY,GAAG,SAASD,KAAK,CAACI,MAAM,KAAKJ,KAAK,CAACK,UAAU,IAAI,SAAS,EAAE;QAAC;;MAI/E;MACAC,OAAO,CAACN,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MAEnC;MACA,IAAIA,KAAK,CAACI,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACV,mBAAmB,CAACa,SAAS,CAACN,YAAY,CAAC;;MAGlD,OAAOX,UAAU,CAAC,MAAM,IAAIkB,KAAK,CAACP,YAAY,CAAC,CAAC;IAClD,CAAC,CAAC,CACH;EACH;;;uBA9CWT,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAiB,SAAhBjB,gBAAgB;IAAA;EAAA","names":["throwError","catchError","ErrorInterceptor","constructor","notificationService","intercept","request","next","handle","pipe","error","errorMessage","ErrorEvent","message","status","statusText","console","showError","Error","factory"],"sourceRoot":"","sources":["/Users/haythemhedfi/Desktop/TechLead/angular-user-management/src/app/core/interceptors/error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private notificationService: NotificationService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let errorMessage = 'An unknown error occurred';\n        \n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          switch (error.status) {\n            case 400:\n              errorMessage = 'Bad Request: The server could not understand the request';\n              break;\n            case 401:\n              errorMessage = 'Unauthorized: You need to be authenticated';\n              break;\n            case 403:\n              errorMessage = 'Forbidden: You don\\'t have permission to access this resource';\n              break;\n            case 404:\n              errorMessage = 'Not Found: The requested resource does not exist';\n              break;\n            case 500:\n              errorMessage = 'Internal Server Error: Something went wrong on the server';\n              break;\n            default:\n              errorMessage = `Error ${error.status}: ${error.statusText || 'Unknown'}`;\n          }\n        }\n        \n        // Log the error\n        console.error('HTTP Error:', error);\n        \n        // Show notification for non-401 errors (401 is handled by auth interceptor)\n        if (error.status !== 401) {\n          this.notificationService.showError(errorMessage);\n        }\n        \n        return throwError(() => new Error(errorMessage));\n      })\n    );\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}