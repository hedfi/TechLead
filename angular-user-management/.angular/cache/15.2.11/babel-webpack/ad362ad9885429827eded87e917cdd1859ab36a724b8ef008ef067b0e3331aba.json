{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  /**\n   * Get user by ID\n   */\n  getUser(id) {\n    return this.http.get(`${this.apiUrl}/user/${id}`).pipe(map(response => {\n      if (!response.data) {\n        throw new Error('User data not found');\n      }\n      return response.data;\n    }), catchError(this.handleError));\n  }\n  /**\n   * Update user information\n   */\n  updateUser(user) {\n    return this.http.put(`${this.apiUrl}/user/${user.id}`, user).pipe(catchError(this.handleError));\n  }\n  /**\n   * Change user password\n   */\n  changePassword(request) {\n    return this.http.post(`${this.apiUrl}/user/change-password`, request).pipe(catchError(this.handleError));\n  }\n  /**\n   * Handle HTTP errors\n   */\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,mCAAmC;;;AAK/D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,WAAM,GAAGH,WAAW,CAACI,MAAM;EAEL;EAEvC;;;EAGAC,OAAO,CAACC,EAAU;IAChB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAoB,GAAG,IAAI,CAACH,MAAM,SAASE,EAAE,EAAE,CAAC,CACjEE,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAG;MACb,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE;QAClB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;;MAExC,OAAOF,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,EACFZ,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACL;EAEA;;;EAGAC,UAAU,CAACC,IAAU;IACnB,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAoB,GAAG,IAAI,CAACX,MAAM,SAASU,IAAI,CAACR,EAAE,EAAE,EAAEQ,IAAI,CAAC,CAC5EN,IAAI,CACHV,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACL;EAEA;;;EAGAI,cAAc,CAACC,OAA8B;IAC3C,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAoB,GAAG,IAAI,CAACd,MAAM,uBAAuB,EAAEa,OAAO,CAAC,CACrFT,IAAI,CACHV,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACL;EAEA;;;EAGQA,WAAW,CAACO,KAAwB;IAC1C,IAAIC,YAAY,GAAG,2BAA2B;IAE9C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;KAC/C,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAGzEE,OAAO,CAACL,KAAK,CAACC,YAAY,CAAC;IAC3B,OAAOvB,UAAU,CAAC,MAAM,IAAIc,KAAK,CAACS,YAAY,CAAC,CAAC;EAClD;;;uBAzDWnB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAwB,SAAXxB,WAAW;MAAAyB,YAFV;IAAM;EAAA","names":["throwError","catchError","map","environment","UserService","constructor","http","apiUrl","getUser","id","get","pipe","response","data","Error","handleError","updateUser","user","put","changePassword","request","post","error","errorMessage","ErrorEvent","message","status","console","factory","providedIn"],"sourceRoot":"","sources":["/Users/haythemhedfi/Desktop/TechLead/angular-user-management/src/app/core/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { User, PasswordChangeRequest, ApiResponse } from '../models/user.interface';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private readonly apiUrl = environment.apiUrl;\n  \n  constructor(private http: HttpClient) {}\n  \n  /**\n   * Get user by ID\n   */\n  getUser(id: number): Observable<User> {\n    return this.http.get<ApiResponse<User>>(`${this.apiUrl}/user/${id}`)\n      .pipe(\n        map(response => {\n          if (!response.data) {\n            throw new Error('User data not found');\n          }\n          return response.data;\n        }),\n        catchError(this.handleError)\n      );\n  }\n  \n  /**\n   * Update user information\n   */\n  updateUser(user: User): Observable<ApiResponse<null>> {\n    return this.http.put<ApiResponse<null>>(`${this.apiUrl}/user/${user.id}`, user)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n  \n  /**\n   * Change user password\n   */\n  changePassword(request: PasswordChangeRequest): Observable<ApiResponse<null>> {\n    return this.http.post<ApiResponse<null>>(`${this.apiUrl}/user/change-password`, request)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n  \n  /**\n   * Handle HTTP errors\n   */\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'An unknown error occurred';\n    \n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    \n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}