{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { UserService } from './services/user.service';\nimport { NotificationService } from './services/notification.service';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\nimport { ErrorInterceptor } from './interceptors/error.interceptor';\nimport * as i0 from \"@angular/core\";\nexport let CoreModule = /*#__PURE__*/(() => {\n  class CoreModule {\n    // Prevent reimporting of the CoreModule\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('CoreModule has already been loaded. Import CoreModule only in the AppModule.');\n      }\n    }\n    static {\n      this.ɵfac = function CoreModule_Factory(t) {\n        return new (t || CoreModule)(i0.ɵɵinject(CoreModule, 12));\n      };\n    }\n    static {\n      this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n        type: CoreModule\n      });\n    }\n    static {\n      this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n        providers: [UserService, NotificationService, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthInterceptor,\n          multi: true\n        }, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: ErrorInterceptor,\n          multi: true\n        }],\n        imports: [CommonModule, HttpClientModule]\n      });\n    }\n  }\n  return CoreModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}