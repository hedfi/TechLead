{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n    }\n    /**\n     * Get user by ID\n     */\n    getUser(id) {\n      return this.http.get(`${this.apiUrl}/user/${id}`).pipe(map(response => {\n        if (!response.data) {\n          throw new Error('User data not found');\n        }\n        return response.data;\n      }), catchError(this.handleError));\n    }\n    /**\n     * Update user information\n     */\n    updateUser(user) {\n      return this.http.put(`${this.apiUrl}/user/${user.id}`, user).pipe(catchError(this.handleError));\n    }\n    /**\n     * Change user password\n     */\n    changePassword(request) {\n      return this.http.post(`${this.apiUrl}/user/change-password`, request).pipe(catchError(this.handleError));\n    }\n    /**\n     * Handle HTTP errors\n     */\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}