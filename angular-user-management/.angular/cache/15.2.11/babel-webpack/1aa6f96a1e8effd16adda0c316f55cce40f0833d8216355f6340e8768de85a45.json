{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/notification.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(notificationService) {\n      this.notificationService = notificationService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(error => {\n        let errorMessage = 'An unknown error occurred';\n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          switch (error.status) {\n            case 400:\n              errorMessage = 'Bad Request: The server could not understand the request';\n              break;\n            case 401:\n              errorMessage = 'Unauthorized: You need to be authenticated';\n              break;\n            case 403:\n              errorMessage = 'Forbidden: You don\\'t have permission to access this resource';\n              break;\n            case 404:\n              errorMessage = 'Not Found: The requested resource does not exist';\n              break;\n            case 500:\n              errorMessage = 'Internal Server Error: Something went wrong on the server';\n              break;\n            default:\n              errorMessage = `Error ${error.status}: ${error.statusText || 'Unknown'}`;\n          }\n        }\n        // Log the error\n        console.error('HTTP Error:', error);\n        // Show notification for non-401 errors (401 is handled by auth interceptor)\n        if (error.status !== 401) {\n          this.notificationService.showError(errorMessage);\n        }\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n    static {\n      this.ɵfac = function ErrorInterceptor_Factory(t) {\n        return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.NotificationService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ErrorInterceptor,\n        factory: ErrorInterceptor.ɵfac\n      });\n    }\n  }\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}