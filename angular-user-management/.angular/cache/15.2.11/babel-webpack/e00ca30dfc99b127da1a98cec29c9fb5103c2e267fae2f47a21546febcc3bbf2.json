{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport { NotificationType } from '../../../core/services/notification.service';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/notification.service\";\nimport * as i2 from \"@angular/common\";\nfunction NotificationToastComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"span\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 5)(5, \"p\", 6);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 7);\n    i0.ɵɵlistener(\"click\", function NotificationToastComponent_div_1_Template_div_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const notification_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.removeNotification(notification_r1));\n    });\n    i0.ɵɵelementStart(8, \"span\", 4);\n    i0.ɵɵtext(9, \"close\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const notification_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getNotificationClass(notification_r1.type))(\"@toastAnimation\", \"visible\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.getNotificationIcon(notification_r1.type));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(notification_r1.message);\n  }\n}\nexport class NotificationToastComponent {\n  constructor(notificationService) {\n    this.notificationService = notificationService;\n    this.notifications = [];\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    // Subscribe to notification service\n    this.subscription.add(this.notificationService.notifications.subscribe(notification => {\n      this.showNotification(notification);\n    }));\n  }\n  ngOnDestroy() {\n    // Unsubscribe to prevent memory leaks\n    this.subscription.unsubscribe();\n  }\n  /**\n   * Show a notification\n   */\n  showNotification(notification) {\n    // Add notification to array\n    this.notifications.push(notification);\n    // Remove notification after duration\n    setTimeout(() => {\n      this.removeNotification(notification);\n    }, notification.duration || 5000);\n  }\n  /**\n   * Remove a notification\n   */\n  removeNotification(notification) {\n    const index = this.notifications.indexOf(notification);\n    if (index > -1) {\n      this.notifications.splice(index, 1);\n    }\n  }\n  /**\n   * Get CSS class for notification type\n   */\n  getNotificationClass(type) {\n    switch (type) {\n      case NotificationType.SUCCESS:\n        return 'toast-success';\n      case NotificationType.ERROR:\n        return 'toast-error';\n      case NotificationType.INFO:\n        return 'toast-info';\n      case NotificationType.WARNING:\n        return 'toast-warning';\n      default:\n        return 'toast-info';\n    }\n  }\n  /**\n   * Get icon for notification type\n   */\n  getNotificationIcon(type) {\n    switch (type) {\n      case NotificationType.SUCCESS:\n        return 'check_circle';\n      case NotificationType.ERROR:\n        return 'error';\n      case NotificationType.INFO:\n        return 'info';\n      case NotificationType.WARNING:\n        return 'warning';\n      default:\n        return 'info';\n    }\n  }\n  static {\n    this.ɵfac = function NotificationToastComponent_Factory(t) {\n      return new (t || NotificationToastComponent)(i0.ɵɵdirectiveInject(i1.NotificationService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NotificationToastComponent,\n      selectors: [[\"app-notification-toast\"]],\n      decls: 2,\n      vars: 1,\n      consts: [[1, \"toast-container\"], [\"class\", \"toast\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"toast\", 3, \"ngClass\"], [1, \"toast-icon\"], [1, \"material-icons\"], [1, \"toast-content\"], [1, \"toast-message\"], [1, \"toast-close\", 3, \"click\"]],\n      template: function NotificationToastComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, NotificationToastComponent_div_1_Template, 10, 4, \"div\", 1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.notifications);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf],\n      styles: [\".toast-container[_ngcontent-%COMP%] {\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  z-index: 1050;\\n  max-width: 350px;\\n  width: 100%;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n}\\n\\n.toast[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n  padding: 12px 16px;\\n  border-radius: 4px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\\n  color: #fff;\\n  font-size: 14px;\\n  line-height: 1.5;\\n  min-height: 48px;\\n  width: 100%;\\n  position: relative;\\n  overflow: hidden;\\n}\\n\\n.toast-success[_ngcontent-%COMP%] {\\n  background-color: #4caf50;\\n}\\n\\n.toast-error[_ngcontent-%COMP%] {\\n  background-color: #f44336;\\n}\\n\\n.toast-info[_ngcontent-%COMP%] {\\n  background-color: #2196f3;\\n}\\n\\n.toast-warning[_ngcontent-%COMP%] {\\n  background-color: #ff9800;\\n}\\n\\n.toast-icon[_ngcontent-%COMP%] {\\n  margin-right: 12px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.toast-icon[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n}\\n\\n.toast-content[_ngcontent-%COMP%] {\\n  flex: 1;\\n}\\n.toast-content[_ngcontent-%COMP%]   .toast-message[_ngcontent-%COMP%] {\\n  margin: 0;\\n  padding: 0;\\n  word-break: break-word;\\n}\\n\\n.toast-close[_ngcontent-%COMP%] {\\n  margin-left: 12px;\\n  cursor: pointer;\\n  opacity: 0.7;\\n  transition: opacity 0.2s ease;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n}\\n.toast-close[_ngcontent-%COMP%]:hover {\\n  opacity: 1;\\n}\\n.toast-close[_ngcontent-%COMP%]   .material-icons[_ngcontent-%COMP%] {\\n  font-size: 18px;\\n}\\n\\n@media (max-width: 576px) {\\n  .toast-container[_ngcontent-%COMP%] {\\n    right: 10px;\\n    left: 10px;\\n    max-width: calc(100% - 20px);\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvbm90aWZpY2F0aW9uLXRvYXN0L25vdGlmaWNhdGlvbi10b2FzdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUNFLGVBQUE7RUFDQSxTQUFBO0VBQ0EsV0FBQTtFQUNBLGFBQUE7RUFDQSxnQkFBQTtFQUNBLFdBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxTQUFBO0FBQUY7O0FBSUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EsMENBQUE7RUFDQSxXQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtBQURGOztBQUtBO0VBQ0UseUJBQUE7QUFGRjs7QUFLQTtFQUNFLHlCQUFBO0FBRkY7O0FBS0E7RUFDRSx5QkFBQTtBQUZGOztBQUtBO0VBQ0UseUJBQUE7QUFGRjs7QUFNQTtFQUNFLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7QUFIRjtBQUtFO0VBQ0UsZUFBQTtBQUhKOztBQVFBO0VBQ0UsT0FBQTtBQUxGO0FBT0U7RUFDRSxTQUFBO0VBQ0EsVUFBQTtFQUNBLHNCQUFBO0FBTEo7O0FBVUE7RUFDRSxpQkFBQTtFQUNBLGVBQUE7RUFDQSxZQUFBO0VBQ0EsNkJBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtBQVBGO0FBU0U7RUFDRSxVQUFBO0FBUEo7QUFVRTtFQUNFLGVBQUE7QUFSSjs7QUFhQTtFQUNFO0lBQ0UsV0FBQTtJQUNBLFVBQUE7SUFDQSw0QkFBQTtFQVZGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUb2FzdCBjb250YWluZXJcbi50b2FzdC1jb250YWluZXIge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMjBweDtcbiAgcmlnaHQ6IDIwcHg7XG4gIHotaW5kZXg6IDEwNTA7XG4gIG1heC13aWR0aDogMzUwcHg7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDEwcHg7XG59XG5cbi8vIEJhc2UgdG9hc3Qgc3R5bGVzXG4udG9hc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAxMnB4IDE2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgYm94LXNoYWRvdzogMCA0cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMTUpO1xuICBjb2xvcjogI2ZmZjtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBsaW5lLWhlaWdodDogMS41O1xuICBtaW4taGVpZ2h0OiA0OHB4O1xuICB3aWR0aDogMTAwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vLyBUb2FzdCB0eXBlc1xuLnRvYXN0LXN1Y2Nlc3Mge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGNhZjUwO1xufVxuXG4udG9hc3QtZXJyb3Ige1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2O1xufVxuXG4udG9hc3QtaW5mbyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTk2ZjM7XG59XG5cbi50b2FzdC13YXJuaW5nIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmOTgwMDtcbn1cblxuLy8gVG9hc3QgaWNvblxuLnRvYXN0LWljb24ge1xuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBcbiAgLm1hdGVyaWFsLWljb25zIHtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gIH1cbn1cblxuLy8gVG9hc3QgY29udGVudFxuLnRvYXN0LWNvbnRlbnQge1xuICBmbGV4OiAxO1xuICBcbiAgLnRvYXN0LW1lc3NhZ2Uge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XG4gIH1cbn1cblxuLy8gVG9hc3QgY2xvc2UgYnV0dG9uXG4udG9hc3QtY2xvc2Uge1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBvcGFjaXR5OiAwLjc7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgXG4gICY6aG92ZXIge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbiAgXG4gIC5tYXRlcmlhbC1pY29ucyB7XG4gICAgZm9udC1zaXplOiAxOHB4O1xuICB9XG59XG5cbi8vIFJlc3BvbnNpdmUgYWRqdXN0bWVudHNcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCkge1xuICAudG9hc3QtY29udGFpbmVyIHtcbiAgICByaWdodDogMTBweDtcbiAgICBsZWZ0OiAxMHB4O1xuICAgIG1heC13aWR0aDogY2FsYygxMDAlIC0gMjBweCk7XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"],\n      data: {\n        animation: [trigger('toastAnimation', [state('void', style({\n          transform: 'translateY(-100%)',\n          opacity: 0\n        })), state('visible', style({\n          transform: 'translateY(0)',\n          opacity: 1\n        })), transition('void => visible', animate('300ms ease-out')), transition('visible => void', animate('300ms ease-in'))])]\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["Subscription","NotificationType","trigger","state","style","transition","animate","i0","NotificationToastComponent","constructor","notificationService","ngOnInit","subscription","add","notifications","subscribe","notification","showNotification","ngOnDestroy","unsubscribe","push","setTimeout","removeNotification","duration","index","indexOf","splice","getNotificationClass","type","SUCCESS","ERROR","INFO","WARNING","getNotificationIcon","selectors","decls","vars","consts","template","transform","opacity"],"sourceRoot":"","sources":["/Users/haythemhedfi/Desktop/TechLead/angular-user-management/src/app/shared/components/notification-toast/notification-toast.component.ts","/Users/haythemhedfi/Desktop/TechLead/angular-user-management/src/app/shared/components/notification-toast/notification-toast.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NotificationService, Notification, NotificationType } from '../../../core/services/notification.service';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n  selector: 'app-notification-toast',\n  templateUrl: './notification-toast.component.html',\n  styleUrls: ['./notification-toast.component.scss'],\n  animations: [\n    trigger('toastAnimation', [\n      state('void', style({\n        transform: 'translateY(-100%)',\n        opacity: 0\n      })),\n      state('visible', style({\n        transform: 'translateY(0)',\n        opacity: 1\n      })),\n      transition('void => visible', animate('300ms ease-out')),\n      transition('visible => void', animate('300ms ease-in'))\n    ])\n  ]\n})\nexport class NotificationToastComponent implements OnInit, OnDestroy {\n  notifications: Notification[] = [];\n  private subscription: Subscription = new Subscription();\n  \n  constructor(private notificationService: NotificationService) {}\n  \n  ngOnInit(): void {\n    // Subscribe to notification service\n    this.subscription.add(\n      this.notificationService.notifications.subscribe(notification => {\n        this.showNotification(notification);\n      })\n    );\n  }\n  \n  ngOnDestroy(): void {\n    // Unsubscribe to prevent memory leaks\n    this.subscription.unsubscribe();\n  }\n  \n  /**\n   * Show a notification\n   */\n  private showNotification(notification: Notification): void {\n    // Add notification to array\n    this.notifications.push(notification);\n    \n    // Remove notification after duration\n    setTimeout(() => {\n      this.removeNotification(notification);\n    }, notification.duration || 5000);\n  }\n  \n  /**\n   * Remove a notification\n   */\n  removeNotification(notification: Notification): void {\n    const index = this.notifications.indexOf(notification);\n    if (index > -1) {\n      this.notifications.splice(index, 1);\n    }\n  }\n  \n  /**\n   * Get CSS class for notification type\n   */\n  getNotificationClass(type: NotificationType): string {\n    switch (type) {\n      case NotificationType.SUCCESS:\n        return 'toast-success';\n      case NotificationType.ERROR:\n        return 'toast-error';\n      case NotificationType.INFO:\n        return 'toast-info';\n      case NotificationType.WARNING:\n        return 'toast-warning';\n      default:\n        return 'toast-info';\n    }\n  }\n  \n  /**\n   * Get icon for notification type\n   */\n  getNotificationIcon(type: NotificationType): string {\n    switch (type) {\n      case NotificationType.SUCCESS:\n        return 'check_circle';\n      case NotificationType.ERROR:\n        return 'error';\n      case NotificationType.INFO:\n        return 'info';\n      case NotificationType.WARNING:\n        return 'warning';\n      default:\n        return 'info';\n    }\n  }\n}","<div class=\"toast-container\">\n  <div \n    *ngFor=\"let notification of notifications\" \n    class=\"toast\" \n    [ngClass]=\"getNotificationClass(notification.type)\"\n    [@toastAnimation]=\"'visible'\">\n    \n    <div class=\"toast-icon\">\n      <span class=\"material-icons\">{{ getNotificationIcon(notification.type) }}</span>\n    </div>\n    \n    <div class=\"toast-content\">\n      <p class=\"toast-message\">{{ notification.message }}</p>\n    </div>\n    \n    <div class=\"toast-close\" (click)=\"removeNotification(notification)\">\n      <span class=\"material-icons\">close</span>\n    </div>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}