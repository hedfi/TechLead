{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  // In a real app, this would come from an auth service\n  getAuthToken() {\n    // This is a placeholder. In a real app, you would get the token from localStorage, a cookie, or a service\n    return localStorage.getItem('auth_token');\n  }\n  intercept(request, next) {\n    const token = this.getAuthToken();\n    if (token) {\n      // Clone the request and add the authorization header\n      const authRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(authRequest);\n    }\n    // If no token, proceed with the original request\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"mappings":";AAUA,OAAM,MAAOA,eAAe;EAC1B;EACQC,YAAY;IAClB;IACA,OAAOC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC3C;EAEAC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACN,YAAY,EAAE;IAEjC,IAAIM,KAAK,EAAE;MACT;MACA,MAAMC,WAAW,GAAGH,OAAO,CAACI,KAAK,CAAC;QAChCC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;MAEF,OAAOD,IAAI,CAACM,MAAM,CAACJ,WAAW,CAAC;;IAGjC;IACA,OAAOF,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;;uBAvBWL,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAAa,SAAfb,eAAe;IAAA;EAAA","names":["AuthInterceptor","getAuthToken","localStorage","getItem","intercept","request","next","token","authRequest","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["/Users/haythemhedfi/Desktop/TechLead/angular-user-management/src/app/core/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  // In a real app, this would come from an auth service\n  private getAuthToken(): string | null {\n    // This is a placeholder. In a real app, you would get the token from localStorage, a cookie, or a service\n    return localStorage.getItem('auth_token');\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token = this.getAuthToken();\n    \n    if (token) {\n      // Clone the request and add the authorization header\n      const authRequest = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      \n      return next.handle(authRequest);\n    }\n    \n    // If no token, proceed with the original request\n    return next.handle(request);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}